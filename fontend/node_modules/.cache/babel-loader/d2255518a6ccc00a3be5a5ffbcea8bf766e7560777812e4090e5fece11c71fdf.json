{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\umarm\\\\OneDrive\\\\Desktop\\\\fiverr-clone\\\\fontend\\\\src\\\\components\\\\ChatApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Messaging from \"./Messaging\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatApp() {\n  _s();\n  const [users, setUsers] = useState([]); // To store the list of users\n  const [selectedUser, setSelectedUser] = useState(null); // To store the selected user\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [userId, setUserId] = useState(\"\");\n\n  // Fetch logged-in user's ID and list of all users\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"userId\");\n    if (loggedInUser) {\n      setUserId(loggedInUser);\n\n      // Fetch all users\n      axios.get(\"http://localhost:5000/api/users\").then(res => setUsers(res.data)).catch(err => console.error(\"Error fetching users:\", err));\n\n      // Fetch conversations for the logged-in user\n      axios.get(`http://localhost:5000/api/conversations/${loggedInUser}`).then(res => setConversations(res.data)).catch(err => console.error(\"Error fetching conversations:\", err));\n    }\n  }, []);\n\n  // Handle user selection to start a conversation\n  const handleUserSelect = receiverId => {\n    // Check if conversation already exists between the user and selected user\n    console.log(`Making GET request to: http://localhost:5000/api/conversations/${userId}/${receiverId}`);\n    axios.get(`http://localhost:5000/api/conversations/${userId}/${receiverId}`).then(res => {\n      if (res.data) {\n        // If a conversation exists, select it\n        setSelectedConversation(res.data);\n      } else {\n        // If no conversation exists, create a new conversation\n        axios.post(\"http://localhost:5000/api/conversations\", {\n          participants: [userId, receiverId]\n        }).then(res => setSelectedConversation(res.data)).catch(err => console.error(\"Error creating conversation:\", err));\n      }\n    }).catch(err => console.error(\"Error checking conversation:\", err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        borderRight: \"1px solid #ddd\",\n        padding: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select a User to Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: users.filter(user => user._id !== userId) // Exclude the logged-in user\n        .map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleUserSelect(user._id) // Start a conversation with selected user\n          ,\n          style: {\n            cursor: \"pointer\",\n            padding: \"5px\"\n          },\n          children: user.name\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 2,\n        padding: \"10px\"\n      },\n      children: selectedConversation ? /*#__PURE__*/_jsxDEV(Messaging, {\n        conversationId: selectedConversation._id,\n        receiverId: selectedConversation.participants.find(id => id !== userId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a user to start a conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatApp, \"3CU0f5NQulHx/1eRgulbE3gbKro=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","axios","Messaging","jsxDEV","_jsxDEV","ChatApp","_s","users","setUsers","selectedUser","setSelectedUser","conversations","setConversations","selectedConversation","setSelectedConversation","userId","setUserId","loggedInUser","localStorage","getItem","get","then","res","data","catch","err","console","error","handleUserSelect","receiverId","log","post","participants","style","display","children","flex","borderRight","padding","fileName","_jsxFileName","lineNumber","columnNumber","filter","user","_id","map","onClick","cursor","name","conversationId","find","id","_c","$RefreshReg$"],"sources":["C:/Users/umarm/OneDrive/Desktop/fiverr-clone/fontend/src/components/ChatApp.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Messaging from \"./Messaging\";\r\n\r\nfunction ChatApp() {\r\n  const [users, setUsers] = useState([]); // To store the list of users\r\n  const [selectedUser, setSelectedUser] = useState(null); // To store the selected user\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState(null);\r\n  const [userId, setUserId] = useState(\"\");\r\n\r\n  // Fetch logged-in user's ID and list of all users\r\n  useEffect(() => {\r\n    const loggedInUser = localStorage.getItem(\"userId\");\r\n    if (loggedInUser) {\r\n      setUserId(loggedInUser);\r\n\r\n      // Fetch all users\r\n      axios\r\n        .get(\"http://localhost:5000/api/users\")\r\n        .then((res) => setUsers(res.data))\r\n        .catch((err) => console.error(\"Error fetching users:\", err));\r\n\r\n      // Fetch conversations for the logged-in user\r\n      axios\r\n        .get(`http://localhost:5000/api/conversations/${loggedInUser}`)\r\n        .then((res) => setConversations(res.data))\r\n        .catch((err) => console.error(\"Error fetching conversations:\", err));\r\n    }\r\n  }, []);\r\n\r\n  // Handle user selection to start a conversation\r\n  const handleUserSelect = (receiverId) => {\r\n    // Check if conversation already exists between the user and selected user\r\n    console.log(`Making GET request to: http://localhost:5000/api/conversations/${userId}/${receiverId}`);\r\n\r\n    axios\r\n      .get(`http://localhost:5000/api/conversations/${userId}/${receiverId}`)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          // If a conversation exists, select it\r\n          setSelectedConversation(res.data);\r\n        } else {\r\n          // If no conversation exists, create a new conversation\r\n          axios\r\n            .post(\"http://localhost:5000/api/conversations\", {\r\n              participants: [userId, receiverId],\r\n            })\r\n            .then((res) => setSelectedConversation(res.data))\r\n            .catch((err) => console.error(\"Error creating conversation:\", err));\r\n        }\r\n      })\r\n      .catch((err) => console.error(\"Error checking conversation:\", err));\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      {/* User List */}\r\n      <div style={{ flex: 1, borderRight: \"1px solid #ddd\", padding: \"10px\" }}>\r\n        <h3>Select a User to Chat</h3>\r\n        <ul>\r\n          {users\r\n            .filter((user) => user._id !== userId) // Exclude the logged-in user\r\n            .map((user) => (\r\n              <li\r\n                key={user._id}\r\n                onClick={() => handleUserSelect(user._id)} // Start a conversation with selected user\r\n                style={{ cursor: \"pointer\", padding: \"5px\" }}\r\n              >\r\n                {user.name}\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {/* Messaging Area */}\r\n      <div style={{ flex: 2, padding: \"10px\" }}>\r\n        {selectedConversation ? (\r\n          <Messaging\r\n            conversationId={selectedConversation._id}\r\n            receiverId={selectedConversation.participants.find(\r\n              (id) => id !== userId\r\n            )}\r\n          />\r\n        ) : (\r\n          <p>Select a user to start a conversation</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}