{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\umarm\\\\OneDrive\\\\Desktop\\\\fiverr-clone\\\\fontend\\\\src\\\\components\\\\Messaging.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Messaging({\n  socket,\n  conversationId,\n  receiverId,\n  userId\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [attachment, setAttachment] = useState(null);\n  useEffect(() => {\n    // Fetch existing messages for the conversation\n    axios.get(`http://localhost:5000/api/messages/${conversationId}`).then(res => {\n      setMessages(res.data); // Load previous messages\n    }).catch(err => console.error(\"Error fetching messages:\", err));\n\n    // Listen for new messages\n    socket.on(\"receiveMessage\", message => {\n      if (message.conversationId === conversationId) {\n        setMessages(prevMessages => [...prevMessages, message]);\n      }\n    });\n    return () => {\n      socket.off(\"receiveMessage\");\n    };\n  }, [conversationId, socket]);\n\n  // const sendMessage = () => {\n  //   const message = {\n  //     conversationId,\n  //     senderId: userId,\n  //     receiverId,\n  //     content: newMessage,\n  //     timestamp: new Date(),\n  //   };\n\n  //   // Emit the message through Socket.IO\n  //   socket.emit(\"sendMessage\", message);\n\n  //   // Save the message to the database\n  //   axios\n  //     .post(\"http://localhost:5000/api/messages\", message)\n  //     .then(() => {\n  //       setMessages((prevMessages) => [...prevMessages, message]);\n  //       setNewMessage(\"\"); // Clear input field\n  //     })\n  //     .catch((err) => console.error(\"Error sending message:\", err));\n  // };\n\n  const sendMessage = async () => {\n    try {\n      let attachmentUrl = null;\n\n      // Upload attachment if provided\n      if (attachment) {\n        const formData = new FormData();\n        formData.append(\"file\", attachment);\n        const uploadRes = await axios.post(\"http://localhost:5000/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        attachmentUrl = uploadRes.data.url;\n      }\n      const message = {\n        conversationId,\n        senderId: userId,\n        receiverId,\n        content: newMessage,\n        attachment: attachmentUrl,\n        timestamp: new Date()\n      };\n\n      // Emit the message through Socket.IO\n      socket.emit(\"sendMessage\", message);\n\n      // Save the message to the database\n      await axios.post(\"http://localhost:5000/api/messages\", message);\n\n      // Update the UI\n      setMessages(prevMessages => [...prevMessages, message]);\n      setNewMessage(\"\");\n      setAttachment(null);\n    } catch (err) {\n      console.error(\"Error sending message:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxHeight: \"300px\",\n        overflowY: \"scroll\"\n      },\n      children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"10px 0\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.senderId === userId ? \"You\" : \"Other\", \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), \" \", msg.content, msg.attachment && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `http://localhost:5000${msg.attachment}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"View Attachment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setAttachment(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(Messaging, \"Q1pykc28VllNRSe5iU2UI4vS6r8=\");\n_c = Messaging;\nexport default Messaging;\nvar _c;\n$RefreshReg$(_c, \"Messaging\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Messaging","socket","conversationId","receiverId","userId","_s","messages","setMessages","newMessage","setNewMessage","attachment","setAttachment","get","then","res","data","catch","err","console","error","on","message","prevMessages","off","sendMessage","attachmentUrl","formData","FormData","append","uploadRes","post","headers","url","senderId","content","timestamp","Date","emit","children","style","maxHeight","overflowY","map","msg","idx","margin","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","type","value","onChange","e","placeholder","files","onClick","_c","$RefreshReg$"],"sources":["C:/Users/umarm/OneDrive/Desktop/fiverr-clone/fontend/src/components/Messaging.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction Messaging({ socket, conversationId, receiverId, userId }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch existing messages for the conversation\r\n    axios\r\n      .get(`http://localhost:5000/api/messages/${conversationId}`)\r\n      .then((res) => {\r\n        setMessages(res.data); // Load previous messages\r\n      })\r\n      .catch((err) => console.error(\"Error fetching messages:\", err));\r\n\r\n    // Listen for new messages\r\n    socket.on(\"receiveMessage\", (message) => {\r\n      if (message.conversationId === conversationId) {\r\n        setMessages((prevMessages) => [...prevMessages, message]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"receiveMessage\");\r\n    };\r\n  }, [conversationId, socket]);\r\n\r\n  // const sendMessage = () => {\r\n  //   const message = {\r\n  //     conversationId,\r\n  //     senderId: userId,\r\n  //     receiverId,\r\n  //     content: newMessage,\r\n  //     timestamp: new Date(),\r\n  //   };\r\n\r\n  //   // Emit the message through Socket.IO\r\n  //   socket.emit(\"sendMessage\", message);\r\n\r\n  //   // Save the message to the database\r\n  //   axios\r\n  //     .post(\"http://localhost:5000/api/messages\", message)\r\n  //     .then(() => {\r\n  //       setMessages((prevMessages) => [...prevMessages, message]);\r\n  //       setNewMessage(\"\"); // Clear input field\r\n  //     })\r\n  //     .catch((err) => console.error(\"Error sending message:\", err));\r\n  // };\r\n\r\n  const sendMessage = async () => {\r\n    try {\r\n      let attachmentUrl = null;\r\n\r\n      // Upload attachment if provided\r\n      if (attachment) {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", attachment);\r\n\r\n        const uploadRes = await axios.post(\r\n          \"http://localhost:5000/upload\",\r\n          formData,\r\n          { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n        );\r\n\r\n        attachmentUrl = uploadRes.data.url;\r\n      }\r\n\r\n      const message = {\r\n        conversationId,\r\n        senderId: userId,\r\n        receiverId,\r\n        content: newMessage,\r\n        attachment: attachmentUrl,\r\n        timestamp: new Date(),\r\n      };\r\n\r\n      // Emit the message through Socket.IO\r\n      socket.emit(\"sendMessage\", message);\r\n\r\n      // Save the message to the database\r\n      await axios.post(\"http://localhost:5000/api/messages\", message);\r\n\r\n      // Update the UI\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n      setNewMessage(\"\");\r\n      setAttachment(null);\r\n    } catch (err) {\r\n      console.error(\"Error sending message:\", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ maxHeight: \"300px\", overflowY: \"scroll\" }}>\r\n        {messages.map((msg, idx) => (\r\n          <div key={idx} style={{ margin: \"10px 0\" }}>\r\n            <strong>{msg.senderId === userId ? \"You\" : \"Other\"}:</strong>{\" \"}\r\n            {msg.content}\r\n            {msg.attachment && (\r\n              <div>\r\n                <a\r\n                  href={`http://localhost:5000${msg.attachment}`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  View Attachment\r\n                </a>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          onChange={(e) => setAttachment(e.target.files[0])}\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Messaging;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}